/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.other98.Comment', null, global);
goog.exportSymbol('proto.other98.CommentView', null, global);
goog.exportSymbol('proto.other98.CommentVote', null, global);
goog.exportSymbol('proto.other98.ContentBlock', null, global);
goog.exportSymbol('proto.other98.ContentBlock.ContentBlockType', null, global);
goog.exportSymbol('proto.other98.CreatePostRequest', null, global);
goog.exportSymbol('proto.other98.FeedRequest', null, global);
goog.exportSymbol('proto.other98.FeedResponseView', null, global);
goog.exportSymbol('proto.other98.GetRequest', null, global);
goog.exportSymbol('proto.other98.Post', null, global);
goog.exportSymbol('proto.other98.PostFeedView', null, global);
goog.exportSymbol('proto.other98.PostSmallView', null, global);
goog.exportSymbol('proto.other98.PostView', null, global);
goog.exportSymbol('proto.other98.PostVote', null, global);
goog.exportSymbol('proto.other98.Profile', null, global);
goog.exportSymbol('proto.other98.ProfileResponseView', null, global);
goog.exportSymbol('proto.other98.Result', null, global);
goog.exportSymbol('proto.other98.Result.StatusCode', null, global);
goog.exportSymbol('proto.other98.Void', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.Void.displayName = 'proto.other98.Void';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.Void}
 */
proto.other98.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.Void;
  return proto.other98.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.Void}
 */
proto.other98.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.GetRequest.displayName = 'proto.other98.GetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authtoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.GetRequest}
 */
proto.other98.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.GetRequest;
  return proto.other98.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.GetRequest}
 */
proto.other98.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthtoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.other98.GetRequest.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.other98.GetRequest.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string authToken = 2;
 * @return {string}
 */
proto.other98.GetRequest.prototype.getAuthtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.GetRequest.prototype.setAuthtoken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.FeedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.other98.FeedRequest.repeatedFields_, null);
};
goog.inherits(proto.other98.FeedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.FeedRequest.displayName = 'proto.other98.FeedRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.other98.FeedRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.FeedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.FeedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.FeedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.FeedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    posttagsList: jspb.Message.getRepeatedField(msg, 1),
    pageid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pagesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    authtoken: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.FeedRequest}
 */
proto.other98.FeedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.FeedRequest;
  return proto.other98.FeedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.FeedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.FeedRequest}
 */
proto.other98.FeedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPosttags(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPagesize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.FeedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.FeedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.FeedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.FeedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosttagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getPageid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAuthtoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated string postTags = 1;
 * @return {!Array<string>}
 */
proto.other98.FeedRequest.prototype.getPosttagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.other98.FeedRequest.prototype.setPosttagsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.other98.FeedRequest.prototype.addPosttags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.other98.FeedRequest.prototype.clearPosttagsList = function() {
  this.setPosttagsList([]);
};


/**
 * optional string pageId = 2;
 * @return {string}
 */
proto.other98.FeedRequest.prototype.getPageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.FeedRequest.prototype.setPageid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 pageSize = 3;
 * @return {number}
 */
proto.other98.FeedRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.other98.FeedRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string authToken = 4;
 * @return {string}
 */
proto.other98.FeedRequest.prototype.getAuthtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.other98.FeedRequest.prototype.setAuthtoken = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.Result.displayName = 'proto.other98.Result';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.Result}
 */
proto.other98.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.Result;
  return proto.other98.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.Result}
 */
proto.other98.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.other98.Result.StatusCode} */ (reader.readEnum());
      msg.setStatuscode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.other98.Result.StatusCode = {
  NONE: 0,
  OK: 1,
  UNAUTHORIZED: 2,
  FORBIDDEN: 3,
  NOT_FOUND: 4,
  INTERNAL_ERROR: 5
};

/**
 * optional StatusCode statusCode = 1;
 * @return {!proto.other98.Result.StatusCode}
 */
proto.other98.Result.prototype.getStatuscode = function() {
  return /** @type {!proto.other98.Result.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.other98.Result.StatusCode} value */
proto.other98.Result.prototype.setStatuscode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.other98.Result.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.Result.prototype.setErrormessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string createdId = 3;
 * @return {string}
 */
proto.other98.Result.prototype.getCreatedid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.other98.Result.prototype.setCreatedid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.PostSmallView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.PostSmallView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.PostSmallView.displayName = 'proto.other98.PostSmallView';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.PostSmallView.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.PostSmallView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.PostSmallView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostSmallView.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    featuredimagelink: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdate: jspb.Message.getFieldWithDefault(msg, 6, 0),
    type: jspb.Message.getFieldWithDefault(msg, 7, ""),
    authorhandle: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.PostSmallView}
 */
proto.other98.PostSmallView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.PostSmallView;
  return proto.other98.PostSmallView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.PostSmallView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.PostSmallView}
 */
proto.other98.PostSmallView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeaturedimagelink(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.PostSmallView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.PostSmallView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.PostSmallView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostSmallView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFeaturedimagelink();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedate();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAuthorhandle();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.other98.PostSmallView.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.other98.PostSmallView.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.other98.PostSmallView.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.PostSmallView.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string featuredImageLink = 3;
 * @return {string}
 */
proto.other98.PostSmallView.prototype.getFeaturedimagelink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.other98.PostSmallView.prototype.setFeaturedimagelink = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 createDate = 6;
 * @return {number}
 */
proto.other98.PostSmallView.prototype.getCreatedate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.other98.PostSmallView.prototype.setCreatedate = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string type = 7;
 * @return {string}
 */
proto.other98.PostSmallView.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.other98.PostSmallView.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string authorHandle = 8;
 * @return {string}
 */
proto.other98.PostSmallView.prototype.getAuthorhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.other98.PostSmallView.prototype.setAuthorhandle = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.Post = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.other98.Post.repeatedFields_, null);
};
goog.inherits(proto.other98.Post, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.Post.displayName = 'proto.other98.Post';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.other98.Post.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.Post.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.Post.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.Post} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Post.toObject = function(includeInstance, msg) {
  var f, obj = {
    postsmallview: (f = msg.getPostsmallview()) && proto.other98.PostSmallView.toObject(includeInstance, f),
    contentblocksList: jspb.Message.toObjectList(msg.getContentblocksList(),
    proto.other98.ContentBlock.toObject, includeInstance),
    posttagsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.Post}
 */
proto.other98.Post.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.Post;
  return proto.other98.Post.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.Post} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.Post}
 */
proto.other98.Post.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.other98.PostSmallView;
      reader.readMessage(value,proto.other98.PostSmallView.deserializeBinaryFromReader);
      msg.setPostsmallview(value);
      break;
    case 2:
      var value = new proto.other98.ContentBlock;
      reader.readMessage(value,proto.other98.ContentBlock.deserializeBinaryFromReader);
      msg.addContentblocks(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPosttags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.Post.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.Post.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.Post} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Post.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostsmallview();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.other98.PostSmallView.serializeBinaryToWriter
    );
  }
  f = message.getContentblocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.other98.ContentBlock.serializeBinaryToWriter
    );
  }
  f = message.getPosttagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional PostSmallView postSmallView = 1;
 * @return {?proto.other98.PostSmallView}
 */
proto.other98.Post.prototype.getPostsmallview = function() {
  return /** @type{?proto.other98.PostSmallView} */ (
    jspb.Message.getWrapperField(this, proto.other98.PostSmallView, 1));
};


/** @param {?proto.other98.PostSmallView|undefined} value */
proto.other98.Post.prototype.setPostsmallview = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.other98.Post.prototype.clearPostsmallview = function() {
  this.setPostsmallview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.Post.prototype.hasPostsmallview = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ContentBlock contentBlocks = 2;
 * @return {!Array<!proto.other98.ContentBlock>}
 */
proto.other98.Post.prototype.getContentblocksList = function() {
  return /** @type{!Array<!proto.other98.ContentBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.other98.ContentBlock, 2));
};


/** @param {!Array<!proto.other98.ContentBlock>} value */
proto.other98.Post.prototype.setContentblocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.other98.ContentBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.other98.ContentBlock}
 */
proto.other98.Post.prototype.addContentblocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.other98.ContentBlock, opt_index);
};


proto.other98.Post.prototype.clearContentblocksList = function() {
  this.setContentblocksList([]);
};


/**
 * repeated string postTags = 3;
 * @return {!Array<string>}
 */
proto.other98.Post.prototype.getPosttagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.other98.Post.prototype.setPosttagsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.other98.Post.prototype.addPosttags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.other98.Post.prototype.clearPosttagsList = function() {
  this.setPosttagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.PostView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.other98.PostView.repeatedFields_, null);
};
goog.inherits(proto.other98.PostView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.PostView.displayName = 'proto.other98.PostView';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.other98.PostView.repeatedFields_ = [3,4,5,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.PostView.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.PostView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.PostView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostView.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    postsmallview: (f = msg.getPostsmallview()) && proto.other98.PostSmallView.toObject(includeInstance, f),
    contentblocksList: jspb.Message.toObjectList(msg.getContentblocksList(),
    proto.other98.ContentBlock.toObject, includeInstance),
    posttagsList: jspb.Message.getRepeatedField(msg, 4),
    commentsList: jspb.Message.toObjectList(msg.getCommentsList(),
    proto.other98.Comment.toObject, includeInstance),
    score: jspb.Message.getFieldWithDefault(msg, 6, 0),
    uservote: jspb.Message.getFieldWithDefault(msg, 7, 0),
    postvotesList: jspb.Message.toObjectList(msg.getPostvotesList(),
    proto.other98.PostVote.toObject, includeInstance),
    result: (f = msg.getResult()) && proto.other98.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.PostView}
 */
proto.other98.PostView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.PostView;
  return proto.other98.PostView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.PostView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.PostView}
 */
proto.other98.PostView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.other98.PostSmallView;
      reader.readMessage(value,proto.other98.PostSmallView.deserializeBinaryFromReader);
      msg.setPostsmallview(value);
      break;
    case 3:
      var value = new proto.other98.ContentBlock;
      reader.readMessage(value,proto.other98.ContentBlock.deserializeBinaryFromReader);
      msg.addContentblocks(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addPosttags(value);
      break;
    case 5:
      var value = new proto.other98.Comment;
      reader.readMessage(value,proto.other98.Comment.deserializeBinaryFromReader);
      msg.addComments(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUservote(value);
      break;
    case 8:
      var value = new proto.other98.PostVote;
      reader.readMessage(value,proto.other98.PostVote.deserializeBinaryFromReader);
      msg.addPostvotes(value);
      break;
    case 9:
      var value = new proto.other98.Result;
      reader.readMessage(value,proto.other98.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.PostView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.PostView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.PostView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPostsmallview();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.other98.PostSmallView.serializeBinaryToWriter
    );
  }
  f = message.getContentblocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.other98.ContentBlock.serializeBinaryToWriter
    );
  }
  f = message.getPosttagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getCommentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.other98.Comment.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getUservote();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPostvotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.other98.PostVote.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.other98.Result.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.other98.PostView.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.other98.PostView.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PostSmallView postSmallView = 2;
 * @return {?proto.other98.PostSmallView}
 */
proto.other98.PostView.prototype.getPostsmallview = function() {
  return /** @type{?proto.other98.PostSmallView} */ (
    jspb.Message.getWrapperField(this, proto.other98.PostSmallView, 2));
};


/** @param {?proto.other98.PostSmallView|undefined} value */
proto.other98.PostView.prototype.setPostsmallview = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.other98.PostView.prototype.clearPostsmallview = function() {
  this.setPostsmallview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.PostView.prototype.hasPostsmallview = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ContentBlock contentBlocks = 3;
 * @return {!Array<!proto.other98.ContentBlock>}
 */
proto.other98.PostView.prototype.getContentblocksList = function() {
  return /** @type{!Array<!proto.other98.ContentBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.other98.ContentBlock, 3));
};


/** @param {!Array<!proto.other98.ContentBlock>} value */
proto.other98.PostView.prototype.setContentblocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.other98.ContentBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.other98.ContentBlock}
 */
proto.other98.PostView.prototype.addContentblocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.other98.ContentBlock, opt_index);
};


proto.other98.PostView.prototype.clearContentblocksList = function() {
  this.setContentblocksList([]);
};


/**
 * repeated string postTags = 4;
 * @return {!Array<string>}
 */
proto.other98.PostView.prototype.getPosttagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.other98.PostView.prototype.setPosttagsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.other98.PostView.prototype.addPosttags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.other98.PostView.prototype.clearPosttagsList = function() {
  this.setPosttagsList([]);
};


/**
 * repeated Comment comments = 5;
 * @return {!Array<!proto.other98.Comment>}
 */
proto.other98.PostView.prototype.getCommentsList = function() {
  return /** @type{!Array<!proto.other98.Comment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.other98.Comment, 5));
};


/** @param {!Array<!proto.other98.Comment>} value */
proto.other98.PostView.prototype.setCommentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.other98.Comment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.other98.Comment}
 */
proto.other98.PostView.prototype.addComments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.other98.Comment, opt_index);
};


proto.other98.PostView.prototype.clearCommentsList = function() {
  this.setCommentsList([]);
};


/**
 * optional int32 score = 6;
 * @return {number}
 */
proto.other98.PostView.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.other98.PostView.prototype.setScore = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 userVote = 7;
 * @return {number}
 */
proto.other98.PostView.prototype.getUservote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.other98.PostView.prototype.setUservote = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated PostVote postVotes = 8;
 * @return {!Array<!proto.other98.PostVote>}
 */
proto.other98.PostView.prototype.getPostvotesList = function() {
  return /** @type{!Array<!proto.other98.PostVote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.other98.PostVote, 8));
};


/** @param {!Array<!proto.other98.PostVote>} value */
proto.other98.PostView.prototype.setPostvotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.other98.PostVote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.other98.PostVote}
 */
proto.other98.PostView.prototype.addPostvotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.other98.PostVote, opt_index);
};


proto.other98.PostView.prototype.clearPostvotesList = function() {
  this.setPostvotesList([]);
};


/**
 * optional Result result = 9;
 * @return {?proto.other98.Result}
 */
proto.other98.PostView.prototype.getResult = function() {
  return /** @type{?proto.other98.Result} */ (
    jspb.Message.getWrapperField(this, proto.other98.Result, 9));
};


/** @param {?proto.other98.Result|undefined} value */
proto.other98.PostView.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.other98.PostView.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.PostView.prototype.hasResult = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.PostFeedView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.PostFeedView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.PostFeedView.displayName = 'proto.other98.PostFeedView';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.PostFeedView.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.PostFeedView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.PostFeedView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostFeedView.toObject = function(includeInstance, msg) {
  var f, obj = {
    postviewid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    postsmallview: (f = msg.getPostsmallview()) && proto.other98.PostSmallView.toObject(includeInstance, f),
    numberofcomments: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dateoflastcomment: jspb.Message.getFieldWithDefault(msg, 4, 0),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0),
    uservote: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.PostFeedView}
 */
proto.other98.PostFeedView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.PostFeedView;
  return proto.other98.PostFeedView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.PostFeedView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.PostFeedView}
 */
proto.other98.PostFeedView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostviewid(value);
      break;
    case 2:
      var value = new proto.other98.PostSmallView;
      reader.readMessage(value,proto.other98.PostSmallView.deserializeBinaryFromReader);
      msg.setPostsmallview(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumberofcomments(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDateoflastcomment(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUservote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.PostFeedView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.PostFeedView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.PostFeedView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostFeedView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostviewid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPostsmallview();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.other98.PostSmallView.serializeBinaryToWriter
    );
  }
  f = message.getNumberofcomments();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getDateoflastcomment();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getUservote();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string postViewId = 1;
 * @return {string}
 */
proto.other98.PostFeedView.prototype.getPostviewid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.other98.PostFeedView.prototype.setPostviewid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PostSmallView postSmallView = 2;
 * @return {?proto.other98.PostSmallView}
 */
proto.other98.PostFeedView.prototype.getPostsmallview = function() {
  return /** @type{?proto.other98.PostSmallView} */ (
    jspb.Message.getWrapperField(this, proto.other98.PostSmallView, 2));
};


/** @param {?proto.other98.PostSmallView|undefined} value */
proto.other98.PostFeedView.prototype.setPostsmallview = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.other98.PostFeedView.prototype.clearPostsmallview = function() {
  this.setPostsmallview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.PostFeedView.prototype.hasPostsmallview = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 numberOfComments = 3;
 * @return {number}
 */
proto.other98.PostFeedView.prototype.getNumberofcomments = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.other98.PostFeedView.prototype.setNumberofcomments = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 dateOfLastComment = 4;
 * @return {number}
 */
proto.other98.PostFeedView.prototype.getDateoflastcomment = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.other98.PostFeedView.prototype.setDateoflastcomment = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 score = 5;
 * @return {number}
 */
proto.other98.PostFeedView.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.other98.PostFeedView.prototype.setScore = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 userVote = 6;
 * @return {number}
 */
proto.other98.PostFeedView.prototype.getUservote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.other98.PostFeedView.prototype.setUservote = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.FeedResponseView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.other98.FeedResponseView.repeatedFields_, null);
};
goog.inherits(proto.other98.FeedResponseView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.FeedResponseView.displayName = 'proto.other98.FeedResponseView';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.other98.FeedResponseView.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.FeedResponseView.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.FeedResponseView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.FeedResponseView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.FeedResponseView.toObject = function(includeInstance, msg) {
  var f, obj = {
    postfeedviewsList: jspb.Message.toObjectList(msg.getPostfeedviewsList(),
    proto.other98.PostFeedView.toObject, includeInstance),
    nextpageid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    result: (f = msg.getResult()) && proto.other98.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.FeedResponseView}
 */
proto.other98.FeedResponseView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.FeedResponseView;
  return proto.other98.FeedResponseView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.FeedResponseView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.FeedResponseView}
 */
proto.other98.FeedResponseView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.other98.PostFeedView;
      reader.readMessage(value,proto.other98.PostFeedView.deserializeBinaryFromReader);
      msg.addPostfeedviews(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextpageid(value);
      break;
    case 3:
      var value = new proto.other98.Result;
      reader.readMessage(value,proto.other98.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.FeedResponseView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.FeedResponseView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.FeedResponseView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.FeedResponseView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostfeedviewsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.other98.PostFeedView.serializeBinaryToWriter
    );
  }
  f = message.getNextpageid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.other98.Result.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PostFeedView postFeedViews = 1;
 * @return {!Array<!proto.other98.PostFeedView>}
 */
proto.other98.FeedResponseView.prototype.getPostfeedviewsList = function() {
  return /** @type{!Array<!proto.other98.PostFeedView>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.other98.PostFeedView, 1));
};


/** @param {!Array<!proto.other98.PostFeedView>} value */
proto.other98.FeedResponseView.prototype.setPostfeedviewsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.other98.PostFeedView=} opt_value
 * @param {number=} opt_index
 * @return {!proto.other98.PostFeedView}
 */
proto.other98.FeedResponseView.prototype.addPostfeedviews = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.other98.PostFeedView, opt_index);
};


proto.other98.FeedResponseView.prototype.clearPostfeedviewsList = function() {
  this.setPostfeedviewsList([]);
};


/**
 * optional string nextPageId = 2;
 * @return {string}
 */
proto.other98.FeedResponseView.prototype.getNextpageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.FeedResponseView.prototype.setNextpageid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Result result = 3;
 * @return {?proto.other98.Result}
 */
proto.other98.FeedResponseView.prototype.getResult = function() {
  return /** @type{?proto.other98.Result} */ (
    jspb.Message.getWrapperField(this, proto.other98.Result, 3));
};


/** @param {?proto.other98.Result|undefined} value */
proto.other98.FeedResponseView.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.other98.FeedResponseView.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.FeedResponseView.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.CreatePostRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.other98.CreatePostRequest.repeatedFields_, null);
};
goog.inherits(proto.other98.CreatePostRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.CreatePostRequest.displayName = 'proto.other98.CreatePostRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.other98.CreatePostRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.CreatePostRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.CreatePostRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.CreatePostRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.CreatePostRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    post: (f = msg.getPost()) && proto.other98.Post.toObject(includeInstance, f),
    viewableRolesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.CreatePostRequest}
 */
proto.other98.CreatePostRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.CreatePostRequest;
  return proto.other98.CreatePostRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.CreatePostRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.CreatePostRequest}
 */
proto.other98.CreatePostRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.other98.Post;
      reader.readMessage(value,proto.other98.Post.deserializeBinaryFromReader);
      msg.setPost(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addViewableRoles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.CreatePostRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.CreatePostRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.CreatePostRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.CreatePostRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPost();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.other98.Post.serializeBinaryToWriter
    );
  }
  f = message.getViewableRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Post post = 1;
 * @return {?proto.other98.Post}
 */
proto.other98.CreatePostRequest.prototype.getPost = function() {
  return /** @type{?proto.other98.Post} */ (
    jspb.Message.getWrapperField(this, proto.other98.Post, 1));
};


/** @param {?proto.other98.Post|undefined} value */
proto.other98.CreatePostRequest.prototype.setPost = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.other98.CreatePostRequest.prototype.clearPost = function() {
  this.setPost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.CreatePostRequest.prototype.hasPost = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string viewable_roles = 2;
 * @return {!Array<string>}
 */
proto.other98.CreatePostRequest.prototype.getViewableRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.other98.CreatePostRequest.prototype.setViewableRolesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.other98.CreatePostRequest.prototype.addViewableRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.other98.CreatePostRequest.prototype.clearViewableRolesList = function() {
  this.setViewableRolesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.Profile.displayName = 'proto.other98.Profile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.Profile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    handle: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 6, ""),
    type: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.Profile}
 */
proto.other98.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.Profile;
  return proto.other98.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.Profile}
 */
proto.other98.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.Profile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.Profile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Profile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHandle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string handle = 1;
 * @return {string}
 */
proto.other98.Profile.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.other98.Profile.prototype.setHandle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 6;
 * @return {string}
 */
proto.other98.Profile.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.other98.Profile.prototype.setEmail = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string type = 8;
 * @return {string}
 */
proto.other98.Profile.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.other98.Profile.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.ProfileResponseView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.ProfileResponseView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.ProfileResponseView.displayName = 'proto.other98.ProfileResponseView';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.ProfileResponseView.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.ProfileResponseView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.ProfileResponseView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.ProfileResponseView.toObject = function(includeInstance, msg) {
  var f, obj = {
    profile: (f = msg.getProfile()) && proto.other98.Profile.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.other98.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.ProfileResponseView}
 */
proto.other98.ProfileResponseView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.ProfileResponseView;
  return proto.other98.ProfileResponseView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.ProfileResponseView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.ProfileResponseView}
 */
proto.other98.ProfileResponseView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.other98.Profile;
      reader.readMessage(value,proto.other98.Profile.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    case 2:
      var value = new proto.other98.Result;
      reader.readMessage(value,proto.other98.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.ProfileResponseView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.ProfileResponseView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.ProfileResponseView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.ProfileResponseView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.other98.Profile.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.other98.Result.serializeBinaryToWriter
    );
  }
};


/**
 * optional Profile profile = 1;
 * @return {?proto.other98.Profile}
 */
proto.other98.ProfileResponseView.prototype.getProfile = function() {
  return /** @type{?proto.other98.Profile} */ (
    jspb.Message.getWrapperField(this, proto.other98.Profile, 1));
};


/** @param {?proto.other98.Profile|undefined} value */
proto.other98.ProfileResponseView.prototype.setProfile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.other98.ProfileResponseView.prototype.clearProfile = function() {
  this.setProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.ProfileResponseView.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Result result = 2;
 * @return {?proto.other98.Result}
 */
proto.other98.ProfileResponseView.prototype.getResult = function() {
  return /** @type{?proto.other98.Result} */ (
    jspb.Message.getWrapperField(this, proto.other98.Result, 2));
};


/** @param {?proto.other98.Result|undefined} value */
proto.other98.ProfileResponseView.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.other98.ProfileResponseView.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.ProfileResponseView.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.ContentBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.other98.ContentBlock.repeatedFields_, null);
};
goog.inherits(proto.other98.ContentBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.ContentBlock.displayName = 'proto.other98.ContentBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.other98.ContentBlock.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.ContentBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.ContentBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.ContentBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.ContentBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    content: jspb.Message.getFieldWithDefault(msg, 2, ""),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.other98.ContentBlock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.ContentBlock}
 */
proto.other98.ContentBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.ContentBlock;
  return proto.other98.ContentBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.ContentBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.ContentBlock}
 */
proto.other98.ContentBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.other98.ContentBlock.ContentBlockType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    case 3:
      var value = new proto.other98.ContentBlock;
      reader.readMessage(value,proto.other98.ContentBlock.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.ContentBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.ContentBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.ContentBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.ContentBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.other98.ContentBlock.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.other98.ContentBlock.ContentBlockType = {
  NONE: 0,
  TEXT: 1,
  IMAGE: 2,
  IMAGEGALLERY: 3,
  LINK: 4,
  VIDEO: 5,
  QUOTE: 6
};

/**
 * optional ContentBlockType type = 1;
 * @return {!proto.other98.ContentBlock.ContentBlockType}
 */
proto.other98.ContentBlock.prototype.getType = function() {
  return /** @type {!proto.other98.ContentBlock.ContentBlockType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.other98.ContentBlock.ContentBlockType} value */
proto.other98.ContentBlock.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.other98.ContentBlock.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.ContentBlock.prototype.setContent = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ContentBlock children = 3;
 * @return {!Array<!proto.other98.ContentBlock>}
 */
proto.other98.ContentBlock.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.other98.ContentBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.other98.ContentBlock, 3));
};


/** @param {!Array<!proto.other98.ContentBlock>} value */
proto.other98.ContentBlock.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.other98.ContentBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.other98.ContentBlock}
 */
proto.other98.ContentBlock.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.other98.ContentBlock, opt_index);
};


proto.other98.ContentBlock.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.Comment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.other98.Comment.repeatedFields_, null);
};
goog.inherits(proto.other98.Comment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.Comment.displayName = 'proto.other98.Comment';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.other98.Comment.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.Comment.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.Comment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.Comment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Comment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    postviewid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdatemillis: jspb.Message.getFieldWithDefault(msg, 3, 0),
    authorhandle: jspb.Message.getFieldWithDefault(msg, 4, ""),
    text: jspb.Message.getFieldWithDefault(msg, 5, ""),
    score: jspb.Message.getFieldWithDefault(msg, 6, 0),
    commentvotesList: jspb.Message.toObjectList(msg.getCommentvotesList(),
    proto.other98.CommentVote.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.Comment}
 */
proto.other98.Comment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.Comment;
  return proto.other98.Comment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.Comment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.Comment}
 */
proto.other98.Comment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostviewid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedatemillis(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorhandle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScore(value);
      break;
    case 7:
      var value = new proto.other98.CommentVote;
      reader.readMessage(value,proto.other98.CommentVote.deserializeBinaryFromReader);
      msg.addCommentvotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.Comment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.Comment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.Comment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.Comment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPostviewid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedatemillis();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getAuthorhandle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getCommentvotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.other98.CommentVote.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.other98.Comment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.other98.Comment.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string postViewId = 2;
 * @return {string}
 */
proto.other98.Comment.prototype.getPostviewid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.Comment.prototype.setPostviewid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 createDateMillis = 3;
 * @return {number}
 */
proto.other98.Comment.prototype.getCreatedatemillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.other98.Comment.prototype.setCreatedatemillis = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string authorHandle = 4;
 * @return {string}
 */
proto.other98.Comment.prototype.getAuthorhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.other98.Comment.prototype.setAuthorhandle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string text = 5;
 * @return {string}
 */
proto.other98.Comment.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.other98.Comment.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 score = 6;
 * @return {number}
 */
proto.other98.Comment.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.other98.Comment.prototype.setScore = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated CommentVote commentVotes = 7;
 * @return {!Array<!proto.other98.CommentVote>}
 */
proto.other98.Comment.prototype.getCommentvotesList = function() {
  return /** @type{!Array<!proto.other98.CommentVote>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.other98.CommentVote, 7));
};


/** @param {!Array<!proto.other98.CommentVote>} value */
proto.other98.Comment.prototype.setCommentvotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.other98.CommentVote=} opt_value
 * @param {number=} opt_index
 * @return {!proto.other98.CommentVote}
 */
proto.other98.Comment.prototype.addCommentvotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.other98.CommentVote, opt_index);
};


proto.other98.Comment.prototype.clearCommentvotesList = function() {
  this.setCommentvotesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.CommentView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.CommentView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.CommentView.displayName = 'proto.other98.CommentView';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.CommentView.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.CommentView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.CommentView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.CommentView.toObject = function(includeInstance, msg) {
  var f, obj = {
    comment: (f = msg.getComment()) && proto.other98.Comment.toObject(includeInstance, f),
    uservote: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.CommentView}
 */
proto.other98.CommentView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.CommentView;
  return proto.other98.CommentView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.CommentView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.CommentView}
 */
proto.other98.CommentView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.other98.Comment;
      reader.readMessage(value,proto.other98.Comment.deserializeBinaryFromReader);
      msg.setComment(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUservote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.CommentView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.CommentView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.CommentView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.CommentView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.other98.Comment.serializeBinaryToWriter
    );
  }
  f = message.getUservote();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Comment comment = 1;
 * @return {?proto.other98.Comment}
 */
proto.other98.CommentView.prototype.getComment = function() {
  return /** @type{?proto.other98.Comment} */ (
    jspb.Message.getWrapperField(this, proto.other98.Comment, 1));
};


/** @param {?proto.other98.Comment|undefined} value */
proto.other98.CommentView.prototype.setComment = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.other98.CommentView.prototype.clearComment = function() {
  this.setComment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.other98.CommentView.prototype.hasComment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 userVote = 3;
 * @return {number}
 */
proto.other98.CommentView.prototype.getUservote = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.other98.CommentView.prototype.setUservote = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.PostVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.PostVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.PostVote.displayName = 'proto.other98.PostVote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.PostVote.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.PostVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.PostVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    postviewid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userhandle: jspb.Message.getFieldWithDefault(msg, 2, ""),
    votevalue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.PostVote}
 */
proto.other98.PostVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.PostVote;
  return proto.other98.PostVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.PostVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.PostVote}
 */
proto.other98.PostVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostviewid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserhandle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVotevalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.PostVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.PostVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.PostVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.PostVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostviewid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserhandle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVotevalue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string postViewId = 1;
 * @return {string}
 */
proto.other98.PostVote.prototype.getPostviewid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.other98.PostVote.prototype.setPostviewid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userHandle = 2;
 * @return {string}
 */
proto.other98.PostVote.prototype.getUserhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.other98.PostVote.prototype.setUserhandle = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 voteValue = 3;
 * @return {number}
 */
proto.other98.PostVote.prototype.getVotevalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.other98.PostVote.prototype.setVotevalue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.other98.CommentVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.other98.CommentVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.other98.CommentVote.displayName = 'proto.other98.CommentVote';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.other98.CommentVote.prototype.toObject = function(opt_includeInstance) {
  return proto.other98.CommentVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.other98.CommentVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.CommentVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    postviewid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userhandle: jspb.Message.getFieldWithDefault(msg, 3, ""),
    votevalue: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.other98.CommentVote}
 */
proto.other98.CommentVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.other98.CommentVote;
  return proto.other98.CommentVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.other98.CommentVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.other98.CommentVote}
 */
proto.other98.CommentVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostviewid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCommentid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserhandle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVotevalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.other98.CommentVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.other98.CommentVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.other98.CommentVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.other98.CommentVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPostviewid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommentid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUserhandle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVotevalue();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string postViewId = 1;
 * @return {string}
 */
proto.other98.CommentVote.prototype.getPostviewid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.other98.CommentVote.prototype.setPostviewid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 commentId = 2;
 * @return {number}
 */
proto.other98.CommentVote.prototype.getCommentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.other98.CommentVote.prototype.setCommentid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string userHandle = 3;
 * @return {string}
 */
proto.other98.CommentVote.prototype.getUserhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.other98.CommentVote.prototype.setUserhandle = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 voteValue = 4;
 * @return {number}
 */
proto.other98.CommentVote.prototype.getVotevalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.other98.CommentVote.prototype.setVotevalue = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


goog.object.extend(exports, proto.other98);
